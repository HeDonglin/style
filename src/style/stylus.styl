// 原始配置方式
// npm i stylus -g
// stylus -h 所有命令
// stylus -w 文件夹 -o css 文件夹
// stylus -w scss -o css

// 科学配置
// gulp
// gulp-stylus

// 单行注释不输出
/*多行注释输出*/
/*!强制输出*/


// _不能省略,后缀可以省略默认为styl
// 不能@import 除了styl的其他文件

@import _base
// @import '_base';
// @import '_base.styl'
// @import '_base.css' 直接按原样输出
// @import '_base.sass' 报错

// 可以不需要花括号
// 可以不需要冒号
// 可以不需要分号
.a
    background #000

.a1 {
    background:#000
}

.a2
    background #500;

// 多个选择器（换行或者写逗号）
ul
li
    background #000

ul,li
    background-position 0 0

// 父级
div
    &:hover
        border 1px solid #000
.div
    &-nav
        background #000
    &_nav
        background-color #FFF

// 变量=值
// 变量$或者不用都行,变量和值之间一定要用=号
font-size=15px
.nav
    font-size font-size

$color=#090
.color
    color $color

.posa
    position relative
    top 50%
    left 50%
    width w=100px
    height h=100px
    margin-top -(h/2)
    margin-left -(w/2)

.posr
    position relative
    width 100px
    height 100px
    margin-top -(@width/2)
    margin-left -(@height/2)

// arguments 传递参数
// unless 存在相同属性那么就不使用该属性
position()
  position: arguments
  z-index: 1 unless @z-index

#logo
  z-index 20
  position absolute

#logo2
  position absolute

// 向上冒泡，一直向上查找属性，如果找不到就是个空null
body
  color: red
  ul
    li
      color: blue
      a
        background-color: @color


// 插值
vendor(prop, args)
  -webkit-{prop} args
  -moz-{prop} args
  {prop} args

border-radius()
  vendor('border-radius', arguments)

box-shadow()
  vendor('box-shadow', arguments)

button
  border-radius 1px 2px / 3px 4px

// 选择器插值
table
  for row in 1 2 3 4 5
    tr:nth-child({row})
      height: 10px * row

/*
运算符优先级，从最高到最低
[]
! ~ + -
is defined
** * / %
+ -
... ..
<= >= < >
in
== is != is not isnt
is a
&& and || or
?:
= := ?= += -= *= /= %=
not
if unless
!0
// => true

!!0
// => false

!1
// => false

!!5px
// => true

-5px
// => -5px

--5px
// => 5px

not true
// => false

not not true
// => true

// 同时提供包含界线操作符(..)和范围操作符(...)
1..5
// => 1 2 3 4 5

1...5
// => 1 2 3 4

//加减
15px - 5px
// => 10px

5 - 2
// => 3

5in - 50mm
// => 3.031in

5s - 1000ms
// => 4s

20mm + 4in
// => 121.6mm

"foo " + "bar"
// => "foo bar"

"num " + 15
// => "num 15"

乘除：/ * %
2000ms + (1s * 2)
// => 4000ms

5s / 2
// => 2.5s

4 % 2
// => 0

*/

// 注意除法/，如果需要相除必须加括号
.abc
    font 14px/1.5
    border (14/1.5)px solid #000

// 指数**
.aaa
    border 2**8px solid #000

/*
// 相等与关系运算：== != >= <= > <

5 == 5
// => true

10 > 5
// => true

#fff == #fff
// => true

true == false
// => false

wahoo == yay
// => false

wahoo == wahoo
// => true

"test" == "test"
// => true

true is true
// => true

'hey' is not 'bye'
// => true

'hey' isnt 'bye'
// => true

(foo bar) == (foo bar)
// => true

(1 2 3) == (1 2 3)
// => true

(1 2 3) == (1 1 3)
// => false
*/

/*
别名
    ==    is
    !=    is not
    !=    isnt
*/

/*
真与假
真
    0%
    0px
    1px
    -1
    -1px
    hey
    'hey'
    (0 0 0)
    ('' '')
假
    0
    null
    false
    ''
*/

/*
逻辑操作符&&和||别名是and 和 or

一假就选第一个，否则选择第二个
5 && 3
// => 3

一真就选择第一个，否则选择第二个
0 || 5
// => 5

0 && 5
// => 0

#fff is a 'rgba' and 15 is a 'unit'
// => true

存在操作符：in
nums = 1 2 3
1 in nums
// => true

5 in nums
// => false

words = foo bar baz
bar in words
// => true

HEY in words
// => false

vals = (error 'one') (error 'two')
error in vals
// => false

(error 'one') in vals
// => true

(error 'two') in vals
// => true

(error 'something') in vals
// => false
*/

pad(types = padding, n = 5px)
  if padding in types
    padding n
  if margin in types
    margin n

body
  pad()

body
  pad(margin)

body
  pad(padding margin, 10px)

/*


实例检查：is a 或函数type()
用做类型检查
15 is a 'unit'
// => true

#fff is a 'rgba'
// => true

15 is a 'rgba'
// => false

type(#fff) == 'rgba'
// => true


变量定义：is defined
此伪二元运算符右边空荡荡，左边无计算。用来检查变量是否已经分配了值。
foo is defined
// => false

foo = 15px
foo is defined
// => true

#fff is defined
// => 'invalid "is defined" check on non-variable #fff'

内置lookup(name)方法做这个活动态查找
name = 'blue'
lookup('light-' + name)
// => null

light-blue = #80e2e9
lookup('light-' + name)
// => #80e2e9


一个未定义的标识符仍是真值
*/

body
  if abc
    padding 5px

// 如下书写就安全了
body
  if ohnoes is defined
    padding 5px

// 作为替代简洁的内置unit()函数，语法(expr) unit可用来强制后缀。
num = 15
.dvm
    border (num ? (num)px: 20px) solid #000

body
  n = 5
  foo: (n)em
  foo: (n)%
  foo: (n + 5)%
  foo: (n * 5)px
  foo: unit(n + 5, '%')
  foo: unit(5 + 180 / 2, deg)

/*
// 颜色操作
#0e0 + #0e0
// => #0f0

// 通过增加或减少百分值调整颜色亮度。颜色亮，加；暗，则减。
#888 + 50%
// => #c3c3c3

#888 - 50%
// => #444

增加或减去色度调整色调。例如，红色增加65deg就变成了黄色。
#f00 + 50deg
// => #ffd500

格式化字符串
格式化字符串模样的字符串%可以用来生成字面量值，通过传参给内置s()方法。
'X::Microsoft::Crap(%s)' % #fc0
// => X::Microsoft::Crap(#fc0)

多个值需要括起来：
'-webkit-gradient(%s, %s, %s)' % (linear (0 0) (0 100%))
// => -webkit-gradient(linear, 0 0, 0 100%)
*/

// 条件赋值：?= :=
// ?=（别名?:）
// 下面三个一样，表示如果变量不存在就使用?=,:=
// color := white
// color ?= white
// color ?: white
// color = color is defined ? color : white
.mm
    color =#999
    // color ?=#090
    // color :=#008
    color = color is defined ? color : #011
    border 1px solid color

border-radius(n)
  -webkit-border-radius n
  -moz-border-radius n
  border-radius n

form input[type=button]
  border-radius 5px

border-radius(n)
  -webkit-border-radius n
  -moz-border-radius n
  border-radius n

form input[type=button]
  border-radius(5px)

support-for-ie ?= true

opacity(n)
  opacity n
  if support-for-ie
    filter unquote('progid:DXImageTransform.Microsoft.Alpha(Opacity=' + round(n * 100) + ')')

#logo
  &:hover
    opacity 0.5

// arguments这个局部变量，传递可以包含多值的表达式
border-radius()
  -webkit-border-radius arguments
  -moz-border-radius arguments
  border-radius arguments

form input[type=button]
    border-radius 1px 2px / 3px 4px

stripe(even = #fff, odd = #eee)
 tr
   background-color odd
   &.even
   &:nth-child(even)
       background-color even

// 父级引用 &
table
  stripe()
  td
    padding 4px 10px

table
  stripe(#303030, #494848)
  td
    color white

// 混合书写中的混合书写
// 自然，混合书写可以利用其它混合书写，建立在它们自己的属性和选择器上。
// 例如，下面我们创建内联comma-list()（通过inline-list()）以及逗号分隔的无序列表。

inline-list()
  li
    display inline

comma-list()
  inline-list()
  li
    &:after
      content ', '
    &:last-child:after
      content ''

ul
  comma-list()

// image-size(path)
// 返回指定path图片的width和height. 向上查找路径的方法和@import一样，paths设置的时候改变。

// 默认会自动添加私有前缀
@keyframes foo {
  from {
    color: black
  }
  to {
    color: white
  }
}

// 如果我们只想有标准解析

vendors = official

@keyframes foo {
  from {
    color: black
  }
  to {
    color: white
  }
}

// @extend 继承

