/*多行注释输出*/
/*强制输出*/
html {
  background-color: #400;
}
.a {
  background: #000;
}
.a1 {
  background: #000;
}
.a2 {
  background: #500;
}
ul,
li {
  background: #000;
}
ul,
li {
  background-position: 0 0;
}
div:hover {
  border: 1px solid #000;
}
.div-nav {
  background: #000;
}
.div_nav {
  background-color: #fff;
}
.nav {
  font-size: 15px;
}
.color {
  color: #090;
}
.posa {
  position: relative;
  top: 50%;
  left: 50%;
  width: 100px;
  height: 100px;
  margin-top: -50px;
  margin-left: -50px;
}
.posr {
  position: relative;
  width: 100px;
  height: 100px;
  margin-top: -50px;
  margin-left: -50px;
}
#logo {
  z-index: 20;
  position: absolute;
}
#logo2 {
  position: absolute;
  z-index: 1;
}
body {
  color: #f00;
}
body ul li {
  color: #00f;
}
body ul li a {
  background-color: #00f;
}
button {
  -webkit-border-radius: 1px 2px/3px 4px;
  -moz-border-radius: 1px 2px/3px 4px;
  border-radius: 1px 2px/3px 4px;
}
table tr:nth-child(1) {
  height: 10px;
}
table tr:nth-child(2) {
  height: 20px;
}
table tr:nth-child(3) {
  height: 30px;
}
table tr:nth-child(4) {
  height: 40px;
}
table tr:nth-child(5) {
  height: 50px;
}
/*
运算符优先级，从最高到最低
[]
! ~ + -
is defined
** * / %
+ -
... ..
<= >= < >
in
== is != is not isnt
is a
&& and || or
?:
= := ?= += -= *= /= %=
not
if unless
!0
// => true

!!0
// => false

!1
// => false

!!5px
// => true

-5px
// => -5px

--5px
// => 5px

not true
// => false

not not true
// => true

// 同时提供包含界线操作符(..)和范围操作符(...)
1..5
// => 1 2 3 4 5

1...5
// => 1 2 3 4

//加减
15px - 5px
// => 10px

5 - 2
// => 3

5in - 50mm
// => 3.031in

5s - 1000ms
// => 4s

20mm + 4in
// => 121.6mm

"foo " + "bar"
// => "foo bar"

"num " + 15
// => "num 15"

乘除：/ * %
2000ms + (1s * 2)
// => 4000ms

5s / 2
// => 2.5s

4 % 2
// => 0

*/
.abc {
  font: 14px/1.5;
  border: 9.333333333333334px solid #000;
}
.aaa {
  border: 256px solid #000;
}
/*
// 相等与关系运算：== != >= <= > <

5 == 5
// => true

10 > 5
// => true

#fff == #fff
// => true

true == false
// => false

wahoo == yay
// => false

wahoo == wahoo
// => true

"test" == "test"
// => true

true is true
// => true

'hey' is not 'bye'
// => true

'hey' isnt 'bye'
// => true

(foo bar) == (foo bar)
// => true

(1 2 3) == (1 2 3)
// => true

(1 2 3) == (1 1 3)
// => false
*/
/*
别名
    ==    is
    !=    is not
    !=    isnt
*/
/*
真与假
真
    0%
    0px
    1px
    -1
    -1px
    hey
    'hey'
    (0 0 0)
    ('' '')
假
    0
    null
    false
    ''
*/
/*
逻辑操作符&&和||别名是and 和 or

一假就选第一个，否则选择第二个
5 && 3
// => 3

一真就选择第一个，否则选择第二个
0 || 5
// => 5

0 && 5
// => 0

#fff is a 'rgba' and 15 is a 'unit'
// => true

存在操作符：in
nums = 1 2 3
1 in nums
// => true

5 in nums
// => false

words = foo bar baz
bar in words
// => true

HEY in words
// => false

vals = (error 'one') (error 'two')
error in vals
// => false

(error 'one') in vals
// => true

(error 'two') in vals
// => true

(error 'something') in vals
// => false
*/
body {
  padding: 5px;
}
body {
  margin: 5px;
}
body {
  padding: 10px;
  margin: 10px;
}
/*


实例检查：is a 或函数type()
用做类型检查
15 is a 'unit'
// => true

#fff is a 'rgba'
// => true

15 is a 'rgba'
// => false

type(#fff) == 'rgba'
// => true


变量定义：is defined
此伪二元运算符右边空荡荡，左边无计算。用来检查变量是否已经分配了值。
foo is defined
// => false

foo = 15px
foo is defined
// => true

#fff is defined
// => 'invalid "is defined" check on non-variable #fff'

内置lookup(name)方法做这个活动态查找
name = 'blue'
lookup('light-' + name)
// => null

light-blue = #80e2e9
lookup('light-' + name)
// => #80e2e9


一个未定义的标识符仍是真值
*/
body {
  padding: 5px;
}
.dvm {
  border: 15px solid #000;
}
body {
  foo: 5em;
  foo: 5%;
  foo: 10%;
  foo: 25px;
  foo: 10%;
  foo: 95deg;
}
/*
// 颜色操作
#0e0 + #0e0
// => #0f0

// 通过增加或减少百分值调整颜色亮度。颜色亮，加；暗，则减。
#888 + 50%
// => #c3c3c3

#888 - 50%
// => #444

增加或减去色度调整色调。例如，红色增加65deg就变成了黄色。
#f00 + 50deg
// => #ffd500

格式化字符串
格式化字符串模样的字符串%可以用来生成字面量值，通过传参给内置s()方法。
'X::Microsoft::Crap(%s)' % #fc0
// => X::Microsoft::Crap(#fc0)

多个值需要括起来：
'-webkit-gradient(%s, %s, %s)' % (linear (0 0) (0 100%))
// => -webkit-gradient(linear, 0 0, 0 100%)
*/
.mm {
  border: 1px solid #999;
}
form input[type=button] {
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
  border-radius: 5px;
}
form input[type=button] {
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
  border-radius: 5px;
}
#logo:hover {
  opacity: 0.5;
  filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=50);
}
form input[type=button] {
  -webkit-border-radius: 1px 2px/3px 4px;
  -moz-border-radius: 1px 2px/3px 4px;
  border-radius: 1px 2px/3px 4px;
}
table tr {
  background-color: #eee;
}
table tr.even,
table tr:nth-child(even) {
  background-color: #fff;
}
table td {
  padding: 4px 10px;
}
table tr {
  background-color: #494848;
}
table tr.even,
table tr:nth-child(even) {
  background-color: #303030;
}
table td {
  color: #fff;
}
ul li {
  display: inline;
}
ul li:after {
  content: ', ';
}
ul li:last-child:after {
  content: '';
}
@-moz-keyframes foo {
  from {
    color: #000;
  }
  to {
    color: #fff;
  }
}
@-webkit-keyframes foo {
  from {
    color: #000;
  }
  to {
    color: #fff;
  }
}
@-o-keyframes foo {
  from {
    color: #000;
  }
  to {
    color: #fff;
  }
}
@keyframes foo {
  from {
    color: #000;
  }
  to {
    color: #fff;
  }
}
@keyframes foo {
  from {
    color: #000;
  }
  to {
    color: #fff;
  }
}
